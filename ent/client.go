// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"laforge/ent/migrate"

	"laforge/ent/tree"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Tree is the client for interacting with the Tree builders.
	Tree *TreeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Tree = NewTreeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Tree:   NewTreeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config: cfg,
		Tree:   NewTreeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Tree.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Tree.Use(hooks...)
}

// TreeClient is a client for the Tree schema.
type TreeClient struct {
	config
}

// NewTreeClient returns a client for the Tree from the given config.
func NewTreeClient(c config) *TreeClient {
	return &TreeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tree.Hooks(f(g(h())))`.
func (c *TreeClient) Use(hooks ...Hook) {
	c.hooks.Tree = append(c.hooks.Tree, hooks...)
}

// Create returns a create builder for Tree.
func (c *TreeClient) Create() *TreeCreate {
	mutation := newTreeMutation(c.config, OpCreate)
	return &TreeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Tree entities.
func (c *TreeClient) CreateBulk(builders ...*TreeCreate) *TreeCreateBulk {
	return &TreeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tree.
func (c *TreeClient) Update() *TreeUpdate {
	mutation := newTreeMutation(c.config, OpUpdate)
	return &TreeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TreeClient) UpdateOne(t *Tree) *TreeUpdateOne {
	mutation := newTreeMutation(c.config, OpUpdateOne, withTree(t))
	return &TreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TreeClient) UpdateOneID(id string) *TreeUpdateOne {
	mutation := newTreeMutation(c.config, OpUpdateOne, withTreeID(id))
	return &TreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tree.
func (c *TreeClient) Delete() *TreeDelete {
	mutation := newTreeMutation(c.config, OpDelete)
	return &TreeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TreeClient) DeleteOne(t *Tree) *TreeDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TreeClient) DeleteOneID(id string) *TreeDeleteOne {
	builder := c.Delete().Where(tree.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TreeDeleteOne{builder}
}

// Query returns a query builder for Tree.
func (c *TreeClient) Query() *TreeQuery {
	return &TreeQuery{config: c.config}
}

// Get returns a Tree entity by its id.
func (c *TreeClient) Get(ctx context.Context, id string) (*Tree, error) {
	return c.Query().Where(tree.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TreeClient) GetX(ctx context.Context, id string) *Tree {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTarget queries the target edge of a Tree.
func (c *TreeClient) QueryTarget(t *Tree) *TreeQuery {
	query := &TreeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tree.Table, tree.FieldID, id),
			sqlgraph.To(tree.Table, tree.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, tree.TargetTable, tree.TargetPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySource queries the source edge of a Tree.
func (c *TreeClient) QuerySource(t *Tree) *TreeQuery {
	query := &TreeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tree.Table, tree.FieldID, id),
			sqlgraph.To(tree.Table, tree.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tree.SourceTable, tree.SourcePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TreeClient) Hooks() []Hook {
	return c.hooks.Tree
}
