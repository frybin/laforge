// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"laforge/ent/tree"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// TreeCreate is the builder for creating a Tree entity.
type TreeCreate struct {
	config
	mutation *TreeMutation
	hooks    []Hook
}

// SetID sets the id field.
func (tc *TreeCreate) SetID(s string) *TreeCreate {
	tc.mutation.SetID(s)
	return tc
}

// AddTargetIDs adds the target edge to Tree by ids.
func (tc *TreeCreate) AddTargetIDs(ids ...string) *TreeCreate {
	tc.mutation.AddTargetIDs(ids...)
	return tc
}

// AddTarget adds the target edges to Tree.
func (tc *TreeCreate) AddTarget(t ...*Tree) *TreeCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTargetIDs(ids...)
}

// AddSourceIDs adds the source edge to Tree by ids.
func (tc *TreeCreate) AddSourceIDs(ids ...string) *TreeCreate {
	tc.mutation.AddSourceIDs(ids...)
	return tc
}

// AddSource adds the source edges to Tree.
func (tc *TreeCreate) AddSource(t ...*Tree) *TreeCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddSourceIDs(ids...)
}

// Mutation returns the TreeMutation object of the builder.
func (tc *TreeCreate) Mutation() *TreeMutation {
	return tc.mutation
}

// Save creates the Tree in the database.
func (tc *TreeCreate) Save(ctx context.Context) (*Tree, error) {
	var (
		err  error
		node *Tree
	)
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TreeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TreeCreate) SaveX(ctx context.Context) *Tree {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (tc *TreeCreate) check() error {
	return nil
}

func (tc *TreeCreate) sqlSave(ctx context.Context) (*Tree, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (tc *TreeCreate) createSpec() (*Tree, *sqlgraph.CreateSpec) {
	var (
		_node = &Tree{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tree.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tree.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if nodes := tc.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tree.TargetTable,
			Columns: tree.TargetPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tree.SourceTable,
			Columns: tree.SourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TreeCreateBulk is the builder for creating a bulk of Tree entities.
type TreeCreateBulk struct {
	config
	builders []*TreeCreate
}

// Save creates the Tree entities in the database.
func (tcb *TreeCreateBulk) Save(ctx context.Context) ([]*Tree, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tree, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TreeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (tcb *TreeCreateBulk) SaveX(ctx context.Context) []*Tree {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
