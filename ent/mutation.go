// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"laforge/ent/tree"
	"sync"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTree = "Tree"
)

// TreeMutation represents an operation that mutate the Trees
// nodes in the graph.
type TreeMutation struct {
	config
	op            Op
	typ           string
	id            *string
	clearedFields map[string]struct{}
	target        map[string]struct{}
	removedtarget map[string]struct{}
	clearedtarget bool
	source        map[string]struct{}
	removedsource map[string]struct{}
	clearedsource bool
	done          bool
	oldValue      func(context.Context) (*Tree, error)
}

var _ ent.Mutation = (*TreeMutation)(nil)

// treeOption allows to manage the mutation configuration using functional options.
type treeOption func(*TreeMutation)

// newTreeMutation creates new mutation for $n.Name.
func newTreeMutation(c config, op Op, opts ...treeOption) *TreeMutation {
	m := &TreeMutation{
		config:        c,
		op:            op,
		typ:           TypeTree,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTreeID sets the id field of the mutation.
func withTreeID(id string) treeOption {
	return func(m *TreeMutation) {
		var (
			err   error
			once  sync.Once
			value *Tree
		)
		m.oldValue = func(ctx context.Context) (*Tree, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tree.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTree sets the old Tree of the mutation.
func withTree(node *Tree) treeOption {
	return func(m *TreeMutation) {
		m.oldValue = func(context.Context) (*Tree, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TreeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TreeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Tree creation.
func (m *TreeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *TreeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// AddTargetIDs adds the target edge to Tree by ids.
func (m *TreeMutation) AddTargetIDs(ids ...string) {
	if m.target == nil {
		m.target = make(map[string]struct{})
	}
	for i := range ids {
		m.target[ids[i]] = struct{}{}
	}
}

// ClearTarget clears the target edge to Tree.
func (m *TreeMutation) ClearTarget() {
	m.clearedtarget = true
}

// TargetCleared returns if the edge target was cleared.
func (m *TreeMutation) TargetCleared() bool {
	return m.clearedtarget
}

// RemoveTargetIDs removes the target edge to Tree by ids.
func (m *TreeMutation) RemoveTargetIDs(ids ...string) {
	if m.removedtarget == nil {
		m.removedtarget = make(map[string]struct{})
	}
	for i := range ids {
		m.removedtarget[ids[i]] = struct{}{}
	}
}

// RemovedTarget returns the removed ids of target.
func (m *TreeMutation) RemovedTargetIDs() (ids []string) {
	for id := range m.removedtarget {
		ids = append(ids, id)
	}
	return
}

// TargetIDs returns the target ids in the mutation.
func (m *TreeMutation) TargetIDs() (ids []string) {
	for id := range m.target {
		ids = append(ids, id)
	}
	return
}

// ResetTarget reset all changes of the "target" edge.
func (m *TreeMutation) ResetTarget() {
	m.target = nil
	m.clearedtarget = false
	m.removedtarget = nil
}

// AddSourceIDs adds the source edge to Tree by ids.
func (m *TreeMutation) AddSourceIDs(ids ...string) {
	if m.source == nil {
		m.source = make(map[string]struct{})
	}
	for i := range ids {
		m.source[ids[i]] = struct{}{}
	}
}

// ClearSource clears the source edge to Tree.
func (m *TreeMutation) ClearSource() {
	m.clearedsource = true
}

// SourceCleared returns if the edge source was cleared.
func (m *TreeMutation) SourceCleared() bool {
	return m.clearedsource
}

// RemoveSourceIDs removes the source edge to Tree by ids.
func (m *TreeMutation) RemoveSourceIDs(ids ...string) {
	if m.removedsource == nil {
		m.removedsource = make(map[string]struct{})
	}
	for i := range ids {
		m.removedsource[ids[i]] = struct{}{}
	}
}

// RemovedSource returns the removed ids of source.
func (m *TreeMutation) RemovedSourceIDs() (ids []string) {
	for id := range m.removedsource {
		ids = append(ids, id)
	}
	return
}

// SourceIDs returns the source ids in the mutation.
func (m *TreeMutation) SourceIDs() (ids []string) {
	for id := range m.source {
		ids = append(ids, id)
	}
	return
}

// ResetSource reset all changes of the "source" edge.
func (m *TreeMutation) ResetSource() {
	m.source = nil
	m.clearedsource = false
	m.removedsource = nil
}

// Op returns the operation name.
func (m *TreeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tree).
func (m *TreeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *TreeMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *TreeMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *TreeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Tree field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TreeMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tree field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *TreeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *TreeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TreeMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Tree numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *TreeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *TreeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *TreeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tree nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *TreeMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Tree field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *TreeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.target != nil {
		edges = append(edges, tree.EdgeTarget)
	}
	if m.source != nil {
		edges = append(edges, tree.EdgeSource)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *TreeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tree.EdgeTarget:
		ids := make([]ent.Value, 0, len(m.target))
		for id := range m.target {
			ids = append(ids, id)
		}
		return ids
	case tree.EdgeSource:
		ids := make([]ent.Value, 0, len(m.source))
		for id := range m.source {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *TreeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtarget != nil {
		edges = append(edges, tree.EdgeTarget)
	}
	if m.removedsource != nil {
		edges = append(edges, tree.EdgeSource)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *TreeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tree.EdgeTarget:
		ids := make([]ent.Value, 0, len(m.removedtarget))
		for id := range m.removedtarget {
			ids = append(ids, id)
		}
		return ids
	case tree.EdgeSource:
		ids := make([]ent.Value, 0, len(m.removedsource))
		for id := range m.removedsource {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *TreeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtarget {
		edges = append(edges, tree.EdgeTarget)
	}
	if m.clearedsource {
		edges = append(edges, tree.EdgeSource)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *TreeMutation) EdgeCleared(name string) bool {
	switch name {
	case tree.EdgeTarget:
		return m.clearedtarget
	case tree.EdgeSource:
		return m.clearedsource
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *TreeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tree unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *TreeMutation) ResetEdge(name string) error {
	switch name {
	case tree.EdgeTarget:
		m.ResetTarget()
		return nil
	case tree.EdgeSource:
		m.ResetSource()
		return nil
	}
	return fmt.Errorf("unknown Tree edge %s", name)
}
