// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"laforge/ent/tree"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Tree is the model entity for the Tree schema.
type Tree struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TreeQuery when eager-loading is set.
	Edges TreeEdges `json:"edges"`
}

// TreeEdges holds the relations/edges for other nodes in the graph.
type TreeEdges struct {
	// Target holds the value of the target edge.
	Target []*Tree
	// Source holds the value of the source edge.
	Source []*Tree
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TargetOrErr returns the Target value or an error if the edge
// was not loaded in eager-loading.
func (e TreeEdges) TargetOrErr() ([]*Tree, error) {
	if e.loadedTypes[0] {
		return e.Target, nil
	}
	return nil, &NotLoadedError{edge: "target"}
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading.
func (e TreeEdges) SourceOrErr() ([]*Tree, error) {
	if e.loadedTypes[1] {
		return e.Source, nil
	}
	return nil, &NotLoadedError{edge: "source"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tree) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tree fields.
func (t *Tree) assignValues(values ...interface{}) error {
	if m, n := len(values), len(tree.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		t.ID = value.String
	}
	values = values[1:]
	return nil
}

// QueryTarget queries the target edge of the Tree.
func (t *Tree) QueryTarget() *TreeQuery {
	return (&TreeClient{config: t.config}).QueryTarget(t)
}

// QuerySource queries the source edge of the Tree.
func (t *Tree) QuerySource() *TreeQuery {
	return (&TreeClient{config: t.config}).QuerySource(t)
}

// Update returns a builder for updating this Tree.
// Note that, you need to call Tree.Unwrap() before calling this method, if this Tree
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tree) Update() *TreeUpdateOne {
	return (&TreeClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Tree) Unwrap() *Tree {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tree is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tree) String() string {
	var builder strings.Builder
	builder.WriteString("Tree(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Trees is a parsable slice of Tree.
type Trees []*Tree

func (t Trees) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
