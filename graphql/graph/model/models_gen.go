// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Build struct {
	ID         string       `json:"id"`
	Revision   int          `json:"revision"`
	Tags       []*Tag       `json:"tags"`
	Config     []*ConfigMap `json:"config"`
	Maintainer *User        `json:"maintainer"`
	Teams      []*Team      `json:"teams"`
}

type Command struct {
	ID           string     `json:"id"`
	Name         string     `json:"name"`
	Description  string     `json:"description"`
	Program      string     `json:"program"`
	Args         []*string  `json:"args"`
	IgnoreErrors bool       `json:"ignoreErrors"`
	Cooldown     int        `json:"cooldown"`
	Timeout      int        `json:"timeout"`
	Disabled     bool       `json:"disabled"`
	Vars         []*VarsMap `json:"vars"`
	Tags         []*Tag     `json:"tags"`
	Maintainer   *User      `json:"maintainer"`
}

type Competition struct {
	ID           string       `json:"id"`
	RootPassword string       `json:"rootPassword"`
	Config       []*ConfigMap `json:"config"`
	DNS          *DNS         `json:"dns"`
}

type DNS struct {
	ID         string       `json:"id"`
	Type       string       `json:"type"`
	RootDomain string       `json:"rootDomain"`
	DNSServers []*string    `json:"DNSServers"`
	NTPServer  []*string    `json:"NTPServer"`
	Config     []*ConfigMap `json:"config"`
}

type DNSRecord struct {
	ID       string     `json:"id"`
	Name     string     `json:"name"`
	Values   []*string  `json:"values"`
	Type     string     `json:"type"`
	Zone     string     `json:"zone"`
	Vars     []*VarsMap `json:"vars"`
	Tags     []*Tag     `json:"tags"`
	Disabled bool       `json:"disabled"`
}

type Disk struct {
	Size int `json:"size"`
}

type Enviroment struct {
	ID              string       `json:"id"`
	CompetitionID   string       `json:"CompetitionID"`
	Name            string       `json:"Name"`
	Description     string       `json:"Description"`
	Builder         string       `json:"Builder"`
	TeamCount       int          `json:"TeamCount"`
	AdminCIDRs      []*string    `json:"AdminCIDRs"`
	ExposedVDIPorts []*string    `json:"ExposedVDIPorts"`
	Tags            []*Tag       `json:"tags"`
	Config          []*ConfigMap `json:"config"`
	Maintainer      *User        `json:"maintainer"`
	Networks        []*Network   `json:"networks"`
	Hosts           []*Host      `json:"hosts"`
	Build           *Build       `json:"build"`
	Competition     *Competition `json:"competition"`
}

type FileDelete struct {
	ID   string `json:"id"`
	Path string `json:"path"`
}

type FileDownload struct {
	ID          string `json:"id"`
	SourceType  string `json:"sourceType"`
	Source      string `json:"source"`
	Destination string `json:"destination"`
	Templete    bool   `json:"templete"`
	Mode        string `json:"mode"`
	Disabled    bool   `json:"disabled"`
	Md5         string `json:"md5"`
	AbsPath     string `json:"absPath"`
	Tags        []*Tag `json:"tags"`
}

type FileExtract struct {
	ID          string `json:"id"`
	Source      string `json:"source"`
	Destination string `json:"destination"`
	Type        string `json:"type"`
}

type Finding struct {
	Name        string            `json:"name"`
	Description string            `json:"description"`
	Severity    FindingSeverity   `json:"severity"`
	Difficulty  FindingDifficulty `json:"difficulty"`
	Maintainer  *User             `json:"maintainer"`
	Tags        []*Tag            `json:"tags"`
	Host        *Host             `json:"Host"`
}

type Host struct {
	ID               string          `json:"id"`
	Hostname         string          `json:"hostname"`
	Os               string          `json:"OS"`
	LastOctect       int             `json:"lastOctect"`
	AllowMacChanges  bool            `json:"allowMacChanges"`
	ExposedTCPPorts  []*string       `json:"exposedTCPPorts"`
	ExposedUDPPorts  []*string       `json:"exposedUDPPorts"`
	OverridePassword string          `json:"overridePassword"`
	Vars             []*VarsMap      `json:"vars"`
	UserGroups       []*string       `json:"userGroups"`
	DependsOn        []*Host         `json:"dependsOn"`
	Maintainer       *User           `json:"maintainer"`
	Tags             []*Tag          `json:"tags"`
	DNSRecords       []*DNSRecord    `json:"dnsRecords"`
	Commands         []*Command      `json:"commands"`
	Scripts          []*Script       `json:"scripts"`
	FileDeletes      []*FileDelete   `json:"fileDeletes"`
	FileDownloads    []*FileDownload `json:"fileDownloads"`
	FileExtracts     []*FileExtract  `json:"fileExtracts"`
}

type Network struct {
	ID         string     `json:"id"`
	Name       string     `json:"name"`
	Cidr       string     `json:"cidr"`
	VdiVisible bool       `json:"vdiVisible"`
	Vars       []*VarsMap `json:"vars"`
	Tags       []*Tag     `json:"tags"`
}

type ProvisionedHost struct {
	ID                 string              `json:"id"`
	SubnetIP           string              `json:"subnetIP"`
	Status             *Status             `json:"status"`
	ProvisionedNetwork *ProvisionedNetwork `json:"provisionedNetwork"`
	ProvisionedSteps   []*ProvisionedStep  `json:"provisionedSteps"`
	Host               *Host               `json:"host"`
}

type ProvisionedNetwork struct {
	ID               string             `json:"id"`
	Name             string             `json:"name"`
	Cidr             string             `json:"cidr"`
	Vars             []*VarsMap         `json:"vars"`
	Tags             []*Tag             `json:"tags"`
	ProvisionedHosts []*ProvisionedHost `json:"provisionedHosts"`
	Status           *Status            `json:"status"`
	Network          *Network           `json:"network"`
	Build            *Build             `json:"build"`
}

type ProvisionedStep struct {
	ID              string           `json:"id"`
	ProvisionType   string           `json:"provisionType"`
	StepNumber      int              `json:"stepNumber"`
	ProvisionedHost *ProvisionedHost `json:"provisionedHost"`
	Status          *Status          `json:"status"`
	Script          *Script          `json:"script"`
	Command         *Command         `json:"command"`
	DNSRecord       *DNSRecord       `json:"DNSRecord"`
	FileDownload    *FileDownload    `json:"fileDownload"`
	FileDelete      *FileDelete      `json:"fileDelete"`
	FileExtract     *FileExtract     `json:"fileExtract"`
}

type Script struct {
	ID           string     `json:"id"`
	Name         string     `json:"name"`
	Language     string     `json:"language"`
	Description  string     `json:"description"`
	Source       string     `json:"source"`
	SourceType   string     `json:"sourceType"`
	Cooldown     int        `json:"cooldown"`
	Timeout      int        `json:"timeout"`
	IgnoreErrors bool       `json:"ignoreErrors"`
	Args         []*string  `json:"args"`
	Disabled     bool       `json:"disabled"`
	Vars         []*VarsMap `json:"vars"`
	Tags         []*Tag     `json:"tags"`
	AbsPath      string     `json:"absPath"`
	Maintainer   *User      `json:"maintainer"`
	Findings     []*Finding `json:"findings"`
}

type Status struct {
	State     ProvisionStatus `json:"state"`
	StartedAt string          `json:"startedAt"`
	EndedAt   string          `json:"endedAt"`
	Failed    bool            `json:"failed"`
	Completed bool            `json:"completed"`
	Error     string          `json:"error"`
}

type Tag struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

type Team struct {
	ID                  string                `json:"id"`
	TeamNumber          int                   `json:"teamNumber"`
	Config              []*ConfigMap          `json:"config"`
	Revision            int                   `json:"revision"`
	Maintainer          *User                 `json:"maintainer"`
	Build               *Build                `json:"build"`
	Enviroment          *Enviroment           `json:"enviroment"`
	Tags                []*Tag                `json:"tags"`
	ProvisionedNetworks []*ProvisionedNetwork `json:"provisionedNetworks"`
}

type User struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	UUID  string `json:"uuid"`
	Email string `json:"email"`
}

type ConfigMap struct {
	Key   *string `json:"key"`
	Value *string `json:"value"`
}

type VarsMap struct {
	Key   *string `json:"key"`
	Value *string `json:"value"`
}

type FindingDifficulty string

const (
	FindingDifficultyZeroDifficulty     FindingDifficulty = "ZeroDifficulty"
	FindingDifficultyNoviceDifficulty   FindingDifficulty = "NoviceDifficulty"
	FindingDifficultyAdvancedDifficulty FindingDifficulty = "AdvancedDifficulty"
	FindingDifficultyExpertDifficulty   FindingDifficulty = "ExpertDifficulty"
	FindingDifficultyNullDifficulty     FindingDifficulty = "NullDifficulty"
)

var AllFindingDifficulty = []FindingDifficulty{
	FindingDifficultyZeroDifficulty,
	FindingDifficultyNoviceDifficulty,
	FindingDifficultyAdvancedDifficulty,
	FindingDifficultyExpertDifficulty,
	FindingDifficultyNullDifficulty,
}

func (e FindingDifficulty) IsValid() bool {
	switch e {
	case FindingDifficultyZeroDifficulty, FindingDifficultyNoviceDifficulty, FindingDifficultyAdvancedDifficulty, FindingDifficultyExpertDifficulty, FindingDifficultyNullDifficulty:
		return true
	}
	return false
}

func (e FindingDifficulty) String() string {
	return string(e)
}

func (e *FindingDifficulty) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FindingDifficulty(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FindingDifficulty", str)
	}
	return nil
}

func (e FindingDifficulty) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FindingSeverity string

const (
	FindingSeverityZeroSeverity     FindingSeverity = "ZeroSeverity"
	FindingSeverityLowSeverity      FindingSeverity = "LowSeverity"
	FindingSeverityMediumSeverity   FindingSeverity = "MediumSeverity"
	FindingSeverityHighSeverity     FindingSeverity = "HighSeverity"
	FindingSeverityCriticalSeverity FindingSeverity = "CriticalSeverity"
	FindingSeverityNullSeverity     FindingSeverity = "NullSeverity"
)

var AllFindingSeverity = []FindingSeverity{
	FindingSeverityZeroSeverity,
	FindingSeverityLowSeverity,
	FindingSeverityMediumSeverity,
	FindingSeverityHighSeverity,
	FindingSeverityCriticalSeverity,
	FindingSeverityNullSeverity,
}

func (e FindingSeverity) IsValid() bool {
	switch e {
	case FindingSeverityZeroSeverity, FindingSeverityLowSeverity, FindingSeverityMediumSeverity, FindingSeverityHighSeverity, FindingSeverityCriticalSeverity, FindingSeverityNullSeverity:
		return true
	}
	return false
}

func (e FindingSeverity) String() string {
	return string(e)
}

func (e *FindingSeverity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FindingSeverity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FindingSeverity", str)
	}
	return nil
}

func (e FindingSeverity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProvisionStatus string

const (
	ProvisionStatusProvStatusUndefined  ProvisionStatus = "ProvStatusUndefined"
	ProvisionStatusProvStatusAwaiting   ProvisionStatus = "ProvStatusAwaiting"
	ProvisionStatusProvStatusInProgress ProvisionStatus = "ProvStatusInProgress"
	ProvisionStatusProvStatusFailed     ProvisionStatus = "ProvStatusFailed"
	ProvisionStatusProvStatusComplete   ProvisionStatus = "ProvStatusComplete"
	ProvisionStatusProvStatusTainted    ProvisionStatus = "ProvStatusTainted"
)

var AllProvisionStatus = []ProvisionStatus{
	ProvisionStatusProvStatusUndefined,
	ProvisionStatusProvStatusAwaiting,
	ProvisionStatusProvStatusInProgress,
	ProvisionStatusProvStatusFailed,
	ProvisionStatusProvStatusComplete,
	ProvisionStatusProvStatusTainted,
}

func (e ProvisionStatus) IsValid() bool {
	switch e {
	case ProvisionStatusProvStatusUndefined, ProvisionStatusProvStatusAwaiting, ProvisionStatusProvStatusInProgress, ProvisionStatusProvStatusFailed, ProvisionStatusProvStatusComplete, ProvisionStatusProvStatusTainted:
		return true
	}
	return false
}

func (e ProvisionStatus) String() string {
	return string(e)
}

func (e *ProvisionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProvisionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProvisionStatus", str)
	}
	return nil
}

func (e ProvisionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
