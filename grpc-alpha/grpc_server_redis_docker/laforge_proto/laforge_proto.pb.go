// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.6.1
// source: laforge_proto/laforge_proto.proto

package laforge_proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//ping info
type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PingRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PingReply) Reset() {
	*x = PingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReply) ProtoMessage() {}

func (x *PingReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReply.ProtoReflect.Descriptor instead.
func (*PingReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{1}
}

func (x *PingReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PingReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// host info
type HostTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"` // Unique ID number for this Host.
	Ip   string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Os   string `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
}

func (x *HostTestRequest) Reset() {
	*x = HostTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostTestRequest) ProtoMessage() {}

func (x *HostTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostTestRequest.ProtoReflect.Descriptor instead.
func (*HostTestRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{2}
}

func (x *HostTestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostTestRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HostTestRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostTestRequest) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

type HostTestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Ip   string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Os   string `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
}

func (x *HostTestReply) Reset() {
	*x = HostTestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostTestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostTestReply) ProtoMessage() {}

func (x *HostTestReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostTestReply.ProtoReflect.Descriptor instead.
func (*HostTestReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{3}
}

func (x *HostTestReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostTestReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HostTestReply) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostTestReply) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

type CompetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Comp:
	//	*CompetitionRequest_Name
	//	*CompetitionRequest_Id
	Comp isCompetitionRequest_Comp `protobuf_oneof:"comp"`
}

func (x *CompetitionRequest) Reset() {
	*x = CompetitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionRequest) ProtoMessage() {}

func (x *CompetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionRequest.ProtoReflect.Descriptor instead.
func (*CompetitionRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{4}
}

func (m *CompetitionRequest) GetComp() isCompetitionRequest_Comp {
	if m != nil {
		return m.Comp
	}
	return nil
}

func (x *CompetitionRequest) GetName() string {
	if x, ok := x.GetComp().(*CompetitionRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *CompetitionRequest) GetId() string {
	if x, ok := x.GetComp().(*CompetitionRequest_Id); ok {
		return x.Id
	}
	return ""
}

type isCompetitionRequest_Comp interface {
	isCompetitionRequest_Comp()
}

type CompetitionRequest_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type CompetitionRequest_Id struct {
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

func (*CompetitionRequest_Name) isCompetitionRequest_Comp() {}

func (*CompetitionRequest_Id) isCompetitionRequest_Comp() {}

type CompetitionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Environments []int32 `protobuf:"varint,3,rep,packed,name=environments,proto3" json:"environments,omitempty"`
	Users        []int32 `protobuf:"varint,4,rep,packed,name=users,proto3" json:"users,omitempty"`
	BuildConfigs []int32 `protobuf:"varint,5,rep,packed,name=build_configs,json=buildConfigs,proto3" json:"build_configs,omitempty"`
}

func (x *CompetitionReply) Reset() {
	*x = CompetitionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionReply) ProtoMessage() {}

func (x *CompetitionReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionReply.ProtoReflect.Descriptor instead.
func (*CompetitionReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{5}
}

func (x *CompetitionReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CompetitionReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompetitionReply) GetEnvironments() []int32 {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *CompetitionReply) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *CompetitionReply) GetBuildConfigs() []int32 {
	if x != nil {
		return x.BuildConfigs
	}
	return nil
}

type EnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Env:
	//	*EnvironmentRequest_Name
	//	*EnvironmentRequest_State
	//	*EnvironmentRequest_Id
	//	*EnvironmentRequest_CompetitionId
	//	*EnvironmentRequest_OwnerId
	Env isEnvironmentRequest_Env `protobuf_oneof:"env"`
}

func (x *EnvironmentRequest) Reset() {
	*x = EnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentRequest) ProtoMessage() {}

func (x *EnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentRequest.ProtoReflect.Descriptor instead.
func (*EnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{6}
}

func (m *EnvironmentRequest) GetEnv() isEnvironmentRequest_Env {
	if m != nil {
		return m.Env
	}
	return nil
}

func (x *EnvironmentRequest) GetName() string {
	if x, ok := x.GetEnv().(*EnvironmentRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *EnvironmentRequest) GetState() string {
	if x, ok := x.GetEnv().(*EnvironmentRequest_State); ok {
		return x.State
	}
	return ""
}

func (x *EnvironmentRequest) GetId() int32 {
	if x, ok := x.GetEnv().(*EnvironmentRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *EnvironmentRequest) GetCompetitionId() int32 {
	if x, ok := x.GetEnv().(*EnvironmentRequest_CompetitionId); ok {
		return x.CompetitionId
	}
	return 0
}

func (x *EnvironmentRequest) GetOwnerId() int32 {
	if x, ok := x.GetEnv().(*EnvironmentRequest_OwnerId); ok {
		return x.OwnerId
	}
	return 0
}

type isEnvironmentRequest_Env interface {
	isEnvironmentRequest_Env()
}

type EnvironmentRequest_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type EnvironmentRequest_State struct {
	State string `protobuf:"bytes,2,opt,name=state,proto3,oneof"`
}

type EnvironmentRequest_Id struct {
	Id int32 `protobuf:"varint,3,opt,name=id,proto3,oneof"`
}

type EnvironmentRequest_CompetitionId struct {
	CompetitionId int32 `protobuf:"varint,4,opt,name=competition_id,json=competitionId,proto3,oneof"`
}

type EnvironmentRequest_OwnerId struct {
	OwnerId int32 `protobuf:"varint,5,opt,name=owner_id,json=ownerId,proto3,oneof"`
}

func (*EnvironmentRequest_Name) isEnvironmentRequest_Env() {}

func (*EnvironmentRequest_State) isEnvironmentRequest_Env() {}

func (*EnvironmentRequest_Id) isEnvironmentRequest_Env() {}

func (*EnvironmentRequest_CompetitionId) isEnvironmentRequest_Env() {}

func (*EnvironmentRequest_OwnerId) isEnvironmentRequest_Env() {}

type EnvironmentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CompetitionId int32    `protobuf:"varint,2,opt,name=competition_id,json=competitionId,proto3" json:"competition_id,omitempty"`
	OwnerId       int32    `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Name          string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	State         string   `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Attrs         []string `protobuf:"bytes,6,rep,name=attrs,proto3" json:"attrs,omitempty"`
	Networks      []int32  `protobuf:"varint,7,rep,packed,name=networks,proto3" json:"networks,omitempty"`
	Teams         []int32  `protobuf:"varint,8,rep,packed,name=teams,proto3" json:"teams,omitempty"`
}

func (x *EnvironmentReply) Reset() {
	*x = EnvironmentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentReply) ProtoMessage() {}

func (x *EnvironmentReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentReply.ProtoReflect.Descriptor instead.
func (*EnvironmentReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{7}
}

func (x *EnvironmentReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EnvironmentReply) GetCompetitionId() int32 {
	if x != nil {
		return x.CompetitionId
	}
	return 0
}

func (x *EnvironmentReply) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *EnvironmentReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *EnvironmentReply) GetAttrs() []string {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *EnvironmentReply) GetNetworks() []int32 {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *EnvironmentReply) GetTeams() []int32 {
	if x != nil {
		return x.Teams
	}
	return nil
}

type BuildConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Buildconfig:
	//	*BuildConfigRequest_Id
	//	*BuildConfigRequest_CompetitionId
	//	*BuildConfigRequest_Provider
	Buildconfig isBuildConfigRequest_Buildconfig `protobuf_oneof:"buildconfig"`
}

func (x *BuildConfigRequest) Reset() {
	*x = BuildConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildConfigRequest) ProtoMessage() {}

func (x *BuildConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildConfigRequest.ProtoReflect.Descriptor instead.
func (*BuildConfigRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{8}
}

func (m *BuildConfigRequest) GetBuildconfig() isBuildConfigRequest_Buildconfig {
	if m != nil {
		return m.Buildconfig
	}
	return nil
}

func (x *BuildConfigRequest) GetId() int32 {
	if x, ok := x.GetBuildconfig().(*BuildConfigRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *BuildConfigRequest) GetCompetitionId() int32 {
	if x, ok := x.GetBuildconfig().(*BuildConfigRequest_CompetitionId); ok {
		return x.CompetitionId
	}
	return 0
}

func (x *BuildConfigRequest) GetProvider() string {
	if x, ok := x.GetBuildconfig().(*BuildConfigRequest_Provider); ok {
		return x.Provider
	}
	return ""
}

type isBuildConfigRequest_Buildconfig interface {
	isBuildConfigRequest_Buildconfig()
}

type BuildConfigRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type BuildConfigRequest_CompetitionId struct {
	CompetitionId int32 `protobuf:"varint,2,opt,name=competition_id,json=competitionId,proto3,oneof"`
}

type BuildConfigRequest_Provider struct {
	Provider string `protobuf:"bytes,3,opt,name=provider,proto3,oneof"`
}

func (*BuildConfigRequest_Id) isBuildConfigRequest_Buildconfig() {}

func (*BuildConfigRequest_CompetitionId) isBuildConfigRequest_Buildconfig() {}

func (*BuildConfigRequest_Provider) isBuildConfigRequest_Buildconfig() {}

type BuildConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CompetitionId int32  `protobuf:"varint,2,opt,name=competition_id,json=competitionId,proto3" json:"competition_id,omitempty"`
	Provider      string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *BuildConfigReply) Reset() {
	*x = BuildConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildConfigReply) ProtoMessage() {}

func (x *BuildConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildConfigReply.ProtoReflect.Descriptor instead.
func (*BuildConfigReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{9}
}

func (x *BuildConfigReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BuildConfigReply) GetCompetitionId() int32 {
	if x != nil {
		return x.CompetitionId
	}
	return 0
}

func (x *BuildConfigReply) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type TeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Team:
	//	*TeamRequest_Id
	//	*TeamRequest_EnvironmentId
	//	*TeamRequest_Number
	//	*TeamRequest_Tag
	//	*TeamRequest_Enabled
	//	*TeamRequest_State
	//	*TeamRequest_NetworkId
	Team isTeamRequest_Team `protobuf_oneof:"team"`
}

func (x *TeamRequest) Reset() {
	*x = TeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRequest) ProtoMessage() {}

func (x *TeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRequest.ProtoReflect.Descriptor instead.
func (*TeamRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{10}
}

func (m *TeamRequest) GetTeam() isTeamRequest_Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (x *TeamRequest) GetId() int32 {
	if x, ok := x.GetTeam().(*TeamRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *TeamRequest) GetEnvironmentId() int32 {
	if x, ok := x.GetTeam().(*TeamRequest_EnvironmentId); ok {
		return x.EnvironmentId
	}
	return 0
}

func (x *TeamRequest) GetNumber() int32 {
	if x, ok := x.GetTeam().(*TeamRequest_Number); ok {
		return x.Number
	}
	return 0
}

func (x *TeamRequest) GetTag() string {
	if x, ok := x.GetTeam().(*TeamRequest_Tag); ok {
		return x.Tag
	}
	return ""
}

func (x *TeamRequest) GetEnabled() bool {
	if x, ok := x.GetTeam().(*TeamRequest_Enabled); ok {
		return x.Enabled
	}
	return false
}

func (x *TeamRequest) GetState() string {
	if x, ok := x.GetTeam().(*TeamRequest_State); ok {
		return x.State
	}
	return ""
}

func (x *TeamRequest) GetNetworkId() int32 {
	if x, ok := x.GetTeam().(*TeamRequest_NetworkId); ok {
		return x.NetworkId
	}
	return 0
}

type isTeamRequest_Team interface {
	isTeamRequest_Team()
}

type TeamRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type TeamRequest_EnvironmentId struct {
	EnvironmentId int32 `protobuf:"varint,2,opt,name=environment_id,json=environmentId,proto3,oneof"`
}

type TeamRequest_Number struct {
	Number int32 `protobuf:"varint,3,opt,name=number,proto3,oneof"`
}

type TeamRequest_Tag struct {
	Tag string `protobuf:"bytes,4,opt,name=tag,proto3,oneof"`
}

type TeamRequest_Enabled struct {
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3,oneof"`
}

type TeamRequest_State struct {
	State string `protobuf:"bytes,6,opt,name=state,proto3,oneof"`
}

type TeamRequest_NetworkId struct {
	NetworkId int32 `protobuf:"varint,7,opt,name=network_id,json=networkId,proto3,oneof"`
}

func (*TeamRequest_Id) isTeamRequest_Team() {}

func (*TeamRequest_EnvironmentId) isTeamRequest_Team() {}

func (*TeamRequest_Number) isTeamRequest_Team() {}

func (*TeamRequest_Tag) isTeamRequest_Team() {}

func (*TeamRequest_Enabled) isTeamRequest_Team() {}

func (*TeamRequest_State) isTeamRequest_Team() {}

func (*TeamRequest_NetworkId) isTeamRequest_Team() {}

type TeamReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentId int32    `protobuf:"varint,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Number        int32    `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Tags          []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Enabled       bool     `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	State         string   `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Networks      []int32  `protobuf:"varint,7,rep,packed,name=networks,proto3" json:"networks,omitempty"`
}

func (x *TeamReply) Reset() {
	*x = TeamReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamReply) ProtoMessage() {}

func (x *TeamReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamReply.ProtoReflect.Descriptor instead.
func (*TeamReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{11}
}

func (x *TeamReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TeamReply) GetEnvironmentId() int32 {
	if x != nil {
		return x.EnvironmentId
	}
	return 0
}

func (x *TeamReply) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *TeamReply) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TeamReply) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TeamReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TeamReply) GetNetworks() []int32 {
	if x != nil {
		return x.Networks
	}
	return nil
}

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to User:
	//	*UserRequest_Id
	//	*UserRequest_Email
	//	*UserRequest_Phone
	//	*UserRequest_Name
	//	*UserRequest_Organization
	//	*UserRequest_Role
	//	*UserRequest_Github
	User isUserRequest_User `protobuf_oneof:"user"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{12}
}

func (m *UserRequest) GetUser() isUserRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (x *UserRequest) GetId() int32 {
	if x, ok := x.GetUser().(*UserRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *UserRequest) GetEmail() string {
	if x, ok := x.GetUser().(*UserRequest_Email); ok {
		return x.Email
	}
	return ""
}

func (x *UserRequest) GetPhone() string {
	if x, ok := x.GetUser().(*UserRequest_Phone); ok {
		return x.Phone
	}
	return ""
}

func (x *UserRequest) GetName() string {
	if x, ok := x.GetUser().(*UserRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *UserRequest) GetOrganization() string {
	if x, ok := x.GetUser().(*UserRequest_Organization); ok {
		return x.Organization
	}
	return ""
}

func (x *UserRequest) GetRole() string {
	if x, ok := x.GetUser().(*UserRequest_Role); ok {
		return x.Role
	}
	return ""
}

func (x *UserRequest) GetGithub() string {
	if x, ok := x.GetUser().(*UserRequest_Github); ok {
		return x.Github
	}
	return ""
}

type isUserRequest_User interface {
	isUserRequest_User()
}

type UserRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type UserRequest_Email struct {
	Email string `protobuf:"bytes,2,opt,name=email,proto3,oneof"`
}

type UserRequest_Phone struct {
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3,oneof"`
}

type UserRequest_Name struct {
	Name string `protobuf:"bytes,4,opt,name=name,proto3,oneof"`
}

type UserRequest_Organization struct {
	Organization string `protobuf:"bytes,5,opt,name=organization,proto3,oneof"`
}

type UserRequest_Role struct {
	Role string `protobuf:"bytes,6,opt,name=role,proto3,oneof"`
}

type UserRequest_Github struct {
	Github string `protobuf:"bytes,7,opt,name=github,proto3,oneof"`
}

func (*UserRequest_Id) isUserRequest_User() {}

func (*UserRequest_Email) isUserRequest_User() {}

func (*UserRequest_Phone) isUserRequest_User() {}

func (*UserRequest_Name) isUserRequest_User() {}

func (*UserRequest_Organization) isUserRequest_User() {}

func (*UserRequest_Role) isUserRequest_User() {}

func (*UserRequest_Github) isUserRequest_User() {}

type UserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Phone        string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Organization string `protobuf:"bytes,5,opt,name=organization,proto3" json:"organization,omitempty"`
	Role         string `protobuf:"bytes,6,opt,name=role,proto3" json:"role,omitempty"`
	Github       string `protobuf:"bytes,7,opt,name=github,proto3" json:"github,omitempty"`
}

func (x *UserReply) Reset() {
	*x = UserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReply) ProtoMessage() {}

func (x *UserReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReply.ProtoReflect.Descriptor instead.
func (*UserReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{13}
}

func (x *UserReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserReply) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserReply) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *UserReply) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *UserReply) GetGithub() string {
	if x != nil {
		return x.Github
	}
	return ""
}

type RoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Role:
	//	*RoleRequest_Id
	//	*RoleRequest_Name
	Role isRoleRequest_Role `protobuf_oneof:"role"`
}

func (x *RoleRequest) Reset() {
	*x = RoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleRequest) ProtoMessage() {}

func (x *RoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleRequest.ProtoReflect.Descriptor instead.
func (*RoleRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{14}
}

func (m *RoleRequest) GetRole() isRoleRequest_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (x *RoleRequest) GetId() int32 {
	if x, ok := x.GetRole().(*RoleRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *RoleRequest) GetName() string {
	if x, ok := x.GetRole().(*RoleRequest_Name); ok {
		return x.Name
	}
	return ""
}

type isRoleRequest_Role interface {
	isRoleRequest_Role()
}

type RoleRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type RoleRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*RoleRequest_Id) isRoleRequest_Role() {}

func (*RoleRequest_Name) isRoleRequest_Role() {}

type RoleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Permissions []string `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *RoleReply) Reset() {
	*x = RoleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleReply) ProtoMessage() {}

func (x *RoleReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleReply.ProtoReflect.Descriptor instead.
func (*RoleReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{15}
}

func (x *RoleReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoleReply) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type PermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Permission:
	//	*PermissionRequest_Id
	//	*PermissionRequest_Name
	Permission isPermissionRequest_Permission `protobuf_oneof:"permission"`
}

func (x *PermissionRequest) Reset() {
	*x = PermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionRequest) ProtoMessage() {}

func (x *PermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionRequest.ProtoReflect.Descriptor instead.
func (*PermissionRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{16}
}

func (m *PermissionRequest) GetPermission() isPermissionRequest_Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

func (x *PermissionRequest) GetId() int32 {
	if x, ok := x.GetPermission().(*PermissionRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *PermissionRequest) GetName() string {
	if x, ok := x.GetPermission().(*PermissionRequest_Name); ok {
		return x.Name
	}
	return ""
}

type isPermissionRequest_Permission interface {
	isPermissionRequest_Permission()
}

type PermissionRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type PermissionRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*PermissionRequest_Id) isPermissionRequest_Permission() {}

func (*PermissionRequest_Name) isPermissionRequest_Permission() {}

type PermissionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PermissionReply) Reset() {
	*x = PermissionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionReply) ProtoMessage() {}

func (x *PermissionReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionReply.ProtoReflect.Descriptor instead.
func (*PermissionReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{17}
}

func (x *PermissionReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PermissionReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Network:
	//	*NetworkRequest_Id
	//	*NetworkRequest_EnvironmentId
	//	*NetworkRequest_Domain
	//	*NetworkRequest_State
	Network isNetworkRequest_Network `protobuf_oneof:"network"`
}

func (x *NetworkRequest) Reset() {
	*x = NetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkRequest) ProtoMessage() {}

func (x *NetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkRequest.ProtoReflect.Descriptor instead.
func (*NetworkRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{18}
}

func (m *NetworkRequest) GetNetwork() isNetworkRequest_Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (x *NetworkRequest) GetId() int32 {
	if x, ok := x.GetNetwork().(*NetworkRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *NetworkRequest) GetEnvironmentId() int32 {
	if x, ok := x.GetNetwork().(*NetworkRequest_EnvironmentId); ok {
		return x.EnvironmentId
	}
	return 0
}

func (x *NetworkRequest) GetDomain() string {
	if x, ok := x.GetNetwork().(*NetworkRequest_Domain); ok {
		return x.Domain
	}
	return ""
}

func (x *NetworkRequest) GetState() string {
	if x, ok := x.GetNetwork().(*NetworkRequest_State); ok {
		return x.State
	}
	return ""
}

type isNetworkRequest_Network interface {
	isNetworkRequest_Network()
}

type NetworkRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type NetworkRequest_EnvironmentId struct {
	EnvironmentId int32 `protobuf:"varint,2,opt,name=environment_id,json=environmentId,proto3,oneof"`
}

type NetworkRequest_Domain struct {
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3,oneof"`
}

type NetworkRequest_State struct {
	State string `protobuf:"bytes,4,opt,name=state,proto3,oneof"`
}

func (*NetworkRequest_Id) isNetworkRequest_Network() {}

func (*NetworkRequest_EnvironmentId) isNetworkRequest_Network() {}

func (*NetworkRequest_Domain) isNetworkRequest_Network() {}

func (*NetworkRequest_State) isNetworkRequest_Network() {}

type NetworkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentId int32    `protobuf:"varint,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Domain        string   `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	State         string   `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Attrs         []string `protobuf:"bytes,5,rep,name=attrs,proto3" json:"attrs,omitempty"`
	Hosts         []string `protobuf:"bytes,6,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *NetworkReply) Reset() {
	*x = NetworkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkReply) ProtoMessage() {}

func (x *NetworkReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkReply.ProtoReflect.Descriptor instead.
func (*NetworkReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{19}
}

func (x *NetworkReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NetworkReply) GetEnvironmentId() int32 {
	if x != nil {
		return x.EnvironmentId
	}
	return 0
}

func (x *NetworkReply) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *NetworkReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *NetworkReply) GetAttrs() []string {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *NetworkReply) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type HostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Host:
	//	*HostRequest_Id
	//	*HostRequest_NetworkId
	//	*HostRequest_Hostname
	//	*HostRequest_Os
	//	*HostRequest_IpAddress
	//	*HostRequest_ConnInfo
	//	*HostRequest_State
	Host isHostRequest_Host `protobuf_oneof:"host"`
}

func (x *HostRequest) Reset() {
	*x = HostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRequest) ProtoMessage() {}

func (x *HostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRequest.ProtoReflect.Descriptor instead.
func (*HostRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{20}
}

func (m *HostRequest) GetHost() isHostRequest_Host {
	if m != nil {
		return m.Host
	}
	return nil
}

func (x *HostRequest) GetId() int32 {
	if x, ok := x.GetHost().(*HostRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *HostRequest) GetNetworkId() int32 {
	if x, ok := x.GetHost().(*HostRequest_NetworkId); ok {
		return x.NetworkId
	}
	return 0
}

func (x *HostRequest) GetHostname() string {
	if x, ok := x.GetHost().(*HostRequest_Hostname); ok {
		return x.Hostname
	}
	return ""
}

func (x *HostRequest) GetOs() string {
	if x, ok := x.GetHost().(*HostRequest_Os); ok {
		return x.Os
	}
	return ""
}

func (x *HostRequest) GetIpAddress() string {
	if x, ok := x.GetHost().(*HostRequest_IpAddress); ok {
		return x.IpAddress
	}
	return ""
}

func (x *HostRequest) GetConnInfo() string {
	if x, ok := x.GetHost().(*HostRequest_ConnInfo); ok {
		return x.ConnInfo
	}
	return ""
}

func (x *HostRequest) GetState() string {
	if x, ok := x.GetHost().(*HostRequest_State); ok {
		return x.State
	}
	return ""
}

type isHostRequest_Host interface {
	isHostRequest_Host()
}

type HostRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type HostRequest_NetworkId struct {
	NetworkId int32 `protobuf:"varint,2,opt,name=network_id,json=networkId,proto3,oneof"`
}

type HostRequest_Hostname struct {
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3,oneof"`
}

type HostRequest_Os struct {
	Os string `protobuf:"bytes,4,opt,name=os,proto3,oneof"`
}

type HostRequest_IpAddress struct {
	IpAddress string `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3,oneof"`
}

type HostRequest_ConnInfo struct {
	ConnInfo string `protobuf:"bytes,6,opt,name=conn_info,json=connInfo,proto3,oneof"`
}

type HostRequest_State struct {
	State string `protobuf:"bytes,7,opt,name=state,proto3,oneof"`
}

func (*HostRequest_Id) isHostRequest_Host() {}

func (*HostRequest_NetworkId) isHostRequest_Host() {}

func (*HostRequest_Hostname) isHostRequest_Host() {}

func (*HostRequest_Os) isHostRequest_Host() {}

func (*HostRequest_IpAddress) isHostRequest_Host() {}

func (*HostRequest_ConnInfo) isHostRequest_Host() {}

func (*HostRequest_State) isHostRequest_Host() {}

type HostReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NetworkId int32    `protobuf:"varint,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Hostname  string   `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Os        string   `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	IpAddress string   `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	ConnInfo  string   `protobuf:"bytes,6,opt,name=conn_info,json=connInfo,proto3" json:"conn_info,omitempty"`
	State     string   `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Attrs     []string `protobuf:"bytes,8,rep,name=attrs,proto3" json:"attrs,omitempty"`
	Steps     []string `protobuf:"bytes,9,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *HostReply) Reset() {
	*x = HostReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostReply) ProtoMessage() {}

func (x *HostReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostReply.ProtoReflect.Descriptor instead.
func (*HostReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{21}
}

func (x *HostReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HostReply) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *HostReply) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostReply) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *HostReply) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *HostReply) GetConnInfo() string {
	if x != nil {
		return x.ConnInfo
	}
	return ""
}

func (x *HostReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *HostReply) GetAttrs() []string {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *HostReply) GetSteps() []string {
	if x != nil {
		return x.Steps
	}
	return nil
}

type StepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Step:
	//	*StepRequest_Id
	//	*StepRequest_HostId
	//	*StepRequest_DefinitionType
	//	*StepRequest_DefinitionId
	//	*StepRequest_Order
	//	*StepRequest_State
	Step isStepRequest_Step `protobuf_oneof:"step"`
}

func (x *StepRequest) Reset() {
	*x = StepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepRequest) ProtoMessage() {}

func (x *StepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepRequest.ProtoReflect.Descriptor instead.
func (*StepRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{22}
}

func (m *StepRequest) GetStep() isStepRequest_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (x *StepRequest) GetId() int32 {
	if x, ok := x.GetStep().(*StepRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *StepRequest) GetHostId() int32 {
	if x, ok := x.GetStep().(*StepRequest_HostId); ok {
		return x.HostId
	}
	return 0
}

func (x *StepRequest) GetDefinitionType() string {
	if x, ok := x.GetStep().(*StepRequest_DefinitionType); ok {
		return x.DefinitionType
	}
	return ""
}

func (x *StepRequest) GetDefinitionId() int32 {
	if x, ok := x.GetStep().(*StepRequest_DefinitionId); ok {
		return x.DefinitionId
	}
	return 0
}

func (x *StepRequest) GetOrder() int32 {
	if x, ok := x.GetStep().(*StepRequest_Order); ok {
		return x.Order
	}
	return 0
}

func (x *StepRequest) GetState() string {
	if x, ok := x.GetStep().(*StepRequest_State); ok {
		return x.State
	}
	return ""
}

type isStepRequest_Step interface {
	isStepRequest_Step()
}

type StepRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type StepRequest_HostId struct {
	HostId int32 `protobuf:"varint,2,opt,name=host_id,json=hostId,proto3,oneof"`
}

type StepRequest_DefinitionType struct {
	DefinitionType string `protobuf:"bytes,3,opt,name=definition_type,json=definitionType,proto3,oneof"`
}

type StepRequest_DefinitionId struct {
	DefinitionId int32 `protobuf:"varint,4,opt,name=definition_id,json=definitionId,proto3,oneof"`
}

type StepRequest_Order struct {
	Order int32 `protobuf:"varint,5,opt,name=order,proto3,oneof"`
}

type StepRequest_State struct {
	State string `protobuf:"bytes,6,opt,name=state,proto3,oneof"`
}

func (*StepRequest_Id) isStepRequest_Step() {}

func (*StepRequest_HostId) isStepRequest_Step() {}

func (*StepRequest_DefinitionType) isStepRequest_Step() {}

func (*StepRequest_DefinitionId) isStepRequest_Step() {}

func (*StepRequest_Order) isStepRequest_Step() {}

func (*StepRequest_State) isStepRequest_Step() {}

type StepReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	HostId         int32  `protobuf:"varint,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	DefinitionType string `protobuf:"bytes,3,opt,name=definition_type,json=definitionType,proto3" json:"definition_type,omitempty"`
	DefinitionId   int32  `protobuf:"varint,4,opt,name=definition_id,json=definitionId,proto3" json:"definition_id,omitempty"`
	Order          int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	State          string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *StepReply) Reset() {
	*x = StepReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepReply) ProtoMessage() {}

func (x *StepReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepReply.ProtoReflect.Descriptor instead.
func (*StepReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{23}
}

func (x *StepReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StepReply) GetHostId() int32 {
	if x != nil {
		return x.HostId
	}
	return 0
}

func (x *StepReply) GetDefinitionType() string {
	if x != nil {
		return x.DefinitionType
	}
	return ""
}

func (x *StepReply) GetDefinitionId() int32 {
	if x != nil {
		return x.DefinitionId
	}
	return 0
}

func (x *StepReply) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *StepReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type ErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Error:
	//	*ErrorRequest_Code
	//	*ErrorRequest_Message
	Error isErrorRequest_Error `protobuf_oneof:"error"`
}

func (x *ErrorRequest) Reset() {
	*x = ErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorRequest) ProtoMessage() {}

func (x *ErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorRequest.ProtoReflect.Descriptor instead.
func (*ErrorRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{24}
}

func (m *ErrorRequest) GetError() isErrorRequest_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (x *ErrorRequest) GetCode() string {
	if x, ok := x.GetError().(*ErrorRequest_Code); ok {
		return x.Code
	}
	return ""
}

func (x *ErrorRequest) GetMessage() string {
	if x, ok := x.GetError().(*ErrorRequest_Message); ok {
		return x.Message
	}
	return ""
}

type isErrorRequest_Error interface {
	isErrorRequest_Error()
}

type ErrorRequest_Code struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3,oneof"`
}

type ErrorRequest_Message struct {
	Message string `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

func (*ErrorRequest_Code) isErrorRequest_Error() {}

func (*ErrorRequest_Message) isErrorRequest_Error() {}

type ErrorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorReply) Reset() {
	*x = ErrorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorReply) ProtoMessage() {}

func (x *ErrorReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorReply.ProtoReflect.Descriptor instead.
func (*ErrorReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{25}
}

func (x *ErrorReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Script:
	//	*ScriptRequest_Id
	//	*ScriptRequest_Name
	//	*ScriptRequest_Os
	//	*ScriptRequest_Provider
	//	*ScriptRequest_Type
	//	*ScriptRequest_Md5
	Script isScriptRequest_Script `protobuf_oneof:"script"`
}

func (x *ScriptRequest) Reset() {
	*x = ScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptRequest) ProtoMessage() {}

func (x *ScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptRequest.ProtoReflect.Descriptor instead.
func (*ScriptRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{26}
}

func (m *ScriptRequest) GetScript() isScriptRequest_Script {
	if m != nil {
		return m.Script
	}
	return nil
}

func (x *ScriptRequest) GetId() int32 {
	if x, ok := x.GetScript().(*ScriptRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *ScriptRequest) GetName() string {
	if x, ok := x.GetScript().(*ScriptRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *ScriptRequest) GetOs() string {
	if x, ok := x.GetScript().(*ScriptRequest_Os); ok {
		return x.Os
	}
	return ""
}

func (x *ScriptRequest) GetProvider() string {
	if x, ok := x.GetScript().(*ScriptRequest_Provider); ok {
		return x.Provider
	}
	return ""
}

func (x *ScriptRequest) GetType() string {
	if x, ok := x.GetScript().(*ScriptRequest_Type); ok {
		return x.Type
	}
	return ""
}

func (x *ScriptRequest) GetMd5() string {
	if x, ok := x.GetScript().(*ScriptRequest_Md5); ok {
		return x.Md5
	}
	return ""
}

type isScriptRequest_Script interface {
	isScriptRequest_Script()
}

type ScriptRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type ScriptRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type ScriptRequest_Os struct {
	Os string `protobuf:"bytes,3,opt,name=os,proto3,oneof"`
}

type ScriptRequest_Provider struct {
	Provider string `protobuf:"bytes,4,opt,name=provider,proto3,oneof"`
}

type ScriptRequest_Type struct {
	Type string `protobuf:"bytes,5,opt,name=type,proto3,oneof"`
}

type ScriptRequest_Md5 struct {
	Md5 string `protobuf:"bytes,6,opt,name=md5,proto3,oneof"`
}

func (*ScriptRequest_Id) isScriptRequest_Script() {}

func (*ScriptRequest_Name) isScriptRequest_Script() {}

func (*ScriptRequest_Os) isScriptRequest_Script() {}

func (*ScriptRequest_Provider) isScriptRequest_Script() {}

func (*ScriptRequest_Type) isScriptRequest_Script() {}

func (*ScriptRequest_Md5) isScriptRequest_Script() {}

type ScriptReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Os          string   `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`
	Provider    string   `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	Type        string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Md5         string   `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	LastUpdated string   `protobuf:"bytes,7,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Description string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Args        []string `protobuf:"bytes,9,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ScriptReply) Reset() {
	*x = ScriptReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptReply) ProtoMessage() {}

func (x *ScriptReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptReply.ProtoReflect.Descriptor instead.
func (*ScriptReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{27}
}

func (x *ScriptReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScriptReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScriptReply) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *ScriptReply) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ScriptReply) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ScriptReply) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *ScriptReply) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *ScriptReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScriptReply) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to File:
	//	*FileRequest_Id
	//	*FileRequest_Name
	//	*FileRequest_Os
	//	*FileRequest_Provider
	//	*FileRequest_Type
	//	*FileRequest_Md5
	File isFileRequest_File `protobuf_oneof:"file"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{28}
}

func (m *FileRequest) GetFile() isFileRequest_File {
	if m != nil {
		return m.File
	}
	return nil
}

func (x *FileRequest) GetId() int32 {
	if x, ok := x.GetFile().(*FileRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *FileRequest) GetName() string {
	if x, ok := x.GetFile().(*FileRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *FileRequest) GetOs() string {
	if x, ok := x.GetFile().(*FileRequest_Os); ok {
		return x.Os
	}
	return ""
}

func (x *FileRequest) GetProvider() string {
	if x, ok := x.GetFile().(*FileRequest_Provider); ok {
		return x.Provider
	}
	return ""
}

func (x *FileRequest) GetType() string {
	if x, ok := x.GetFile().(*FileRequest_Type); ok {
		return x.Type
	}
	return ""
}

func (x *FileRequest) GetMd5() string {
	if x, ok := x.GetFile().(*FileRequest_Md5); ok {
		return x.Md5
	}
	return ""
}

type isFileRequest_File interface {
	isFileRequest_File()
}

type FileRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type FileRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type FileRequest_Os struct {
	Os string `protobuf:"bytes,3,opt,name=os,proto3,oneof"`
}

type FileRequest_Provider struct {
	Provider string `protobuf:"bytes,4,opt,name=provider,proto3,oneof"`
}

type FileRequest_Type struct {
	Type string `protobuf:"bytes,5,opt,name=type,proto3,oneof"`
}

type FileRequest_Md5 struct {
	Md5 string `protobuf:"bytes,6,opt,name=md5,proto3,oneof"`
}

func (*FileRequest_Id) isFileRequest_File() {}

func (*FileRequest_Name) isFileRequest_File() {}

func (*FileRequest_Os) isFileRequest_File() {}

func (*FileRequest_Provider) isFileRequest_File() {}

func (*FileRequest_Type) isFileRequest_File() {}

func (*FileRequest_Md5) isFileRequest_File() {}

type FileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Os          string `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`
	Provider    string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	Type        string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Md5         string `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	LastUpdated string `protobuf:"bytes,7,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *FileReply) Reset() {
	*x = FileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReply) ProtoMessage() {}

func (x *FileReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReply.ProtoReflect.Descriptor instead.
func (*FileReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{29}
}

func (x *FileReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileReply) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *FileReply) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *FileReply) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FileReply) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *FileReply) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*CommandRequest_Id
	//	*CommandRequest_Name
	//	*CommandRequest_Os
	//	*CommandRequest_Provider
	//	*CommandRequest_Type
	//	*CommandRequest_Md5
	Command isCommandRequest_Command `protobuf_oneof:"command"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{30}
}

func (m *CommandRequest) GetCommand() isCommandRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *CommandRequest) GetId() int32 {
	if x, ok := x.GetCommand().(*CommandRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *CommandRequest) GetName() string {
	if x, ok := x.GetCommand().(*CommandRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *CommandRequest) GetOs() string {
	if x, ok := x.GetCommand().(*CommandRequest_Os); ok {
		return x.Os
	}
	return ""
}

func (x *CommandRequest) GetProvider() string {
	if x, ok := x.GetCommand().(*CommandRequest_Provider); ok {
		return x.Provider
	}
	return ""
}

func (x *CommandRequest) GetType() string {
	if x, ok := x.GetCommand().(*CommandRequest_Type); ok {
		return x.Type
	}
	return ""
}

func (x *CommandRequest) GetMd5() string {
	if x, ok := x.GetCommand().(*CommandRequest_Md5); ok {
		return x.Md5
	}
	return ""
}

type isCommandRequest_Command interface {
	isCommandRequest_Command()
}

type CommandRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type CommandRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type CommandRequest_Os struct {
	Os string `protobuf:"bytes,3,opt,name=os,proto3,oneof"`
}

type CommandRequest_Provider struct {
	Provider string `protobuf:"bytes,4,opt,name=provider,proto3,oneof"`
}

type CommandRequest_Type struct {
	Type string `protobuf:"bytes,5,opt,name=type,proto3,oneof"`
}

type CommandRequest_Md5 struct {
	Md5 string `protobuf:"bytes,6,opt,name=md5,proto3,oneof"`
}

func (*CommandRequest_Id) isCommandRequest_Command() {}

func (*CommandRequest_Name) isCommandRequest_Command() {}

func (*CommandRequest_Os) isCommandRequest_Command() {}

func (*CommandRequest_Provider) isCommandRequest_Command() {}

func (*CommandRequest_Type) isCommandRequest_Command() {}

func (*CommandRequest_Md5) isCommandRequest_Command() {}

type CommandReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Os          string `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`
	Provider    string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	Type        string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Md5         string `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	Command     string `protobuf:"bytes,7,opt,name=command,proto3" json:"command,omitempty"`
	LastUpdated string `protobuf:"bytes,8,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *CommandReply) Reset() {
	*x = CommandReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReply) ProtoMessage() {}

func (x *CommandReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReply.ProtoReflect.Descriptor instead.
func (*CommandReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{31}
}

func (x *CommandReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommandReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommandReply) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *CommandReply) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CommandReply) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CommandReply) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *CommandReply) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandReply) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

type DNS_RecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DnsRecord:
	//	*DNS_RecordRequest_Id
	//	*DNS_RecordRequest_Name
	//	*DNS_RecordRequest_Type
	//	*DNS_RecordRequest_Ip
	//	*DNS_RecordRequest_Provider
	//	*DNS_RecordRequest_HostId
	DnsRecord isDNS_RecordRequest_DnsRecord `protobuf_oneof:"dns_record"`
}

func (x *DNS_RecordRequest) Reset() {
	*x = DNS_RecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNS_RecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNS_RecordRequest) ProtoMessage() {}

func (x *DNS_RecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNS_RecordRequest.ProtoReflect.Descriptor instead.
func (*DNS_RecordRequest) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{32}
}

func (m *DNS_RecordRequest) GetDnsRecord() isDNS_RecordRequest_DnsRecord {
	if m != nil {
		return m.DnsRecord
	}
	return nil
}

func (x *DNS_RecordRequest) GetId() int32 {
	if x, ok := x.GetDnsRecord().(*DNS_RecordRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *DNS_RecordRequest) GetName() string {
	if x, ok := x.GetDnsRecord().(*DNS_RecordRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *DNS_RecordRequest) GetType() string {
	if x, ok := x.GetDnsRecord().(*DNS_RecordRequest_Type); ok {
		return x.Type
	}
	return ""
}

func (x *DNS_RecordRequest) GetIp() string {
	if x, ok := x.GetDnsRecord().(*DNS_RecordRequest_Ip); ok {
		return x.Ip
	}
	return ""
}

func (x *DNS_RecordRequest) GetProvider() string {
	if x, ok := x.GetDnsRecord().(*DNS_RecordRequest_Provider); ok {
		return x.Provider
	}
	return ""
}

func (x *DNS_RecordRequest) GetHostId() int32 {
	if x, ok := x.GetDnsRecord().(*DNS_RecordRequest_HostId); ok {
		return x.HostId
	}
	return 0
}

type isDNS_RecordRequest_DnsRecord interface {
	isDNS_RecordRequest_DnsRecord()
}

type DNS_RecordRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type DNS_RecordRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type DNS_RecordRequest_Type struct {
	Type string `protobuf:"bytes,3,opt,name=type,proto3,oneof"`
}

type DNS_RecordRequest_Ip struct {
	Ip string `protobuf:"bytes,4,opt,name=ip,proto3,oneof"`
}

type DNS_RecordRequest_Provider struct {
	Provider string `protobuf:"bytes,5,opt,name=provider,proto3,oneof"`
}

type DNS_RecordRequest_HostId struct {
	HostId int32 `protobuf:"varint,6,opt,name=host_id,json=hostId,proto3,oneof"`
}

func (*DNS_RecordRequest_Id) isDNS_RecordRequest_DnsRecord() {}

func (*DNS_RecordRequest_Name) isDNS_RecordRequest_DnsRecord() {}

func (*DNS_RecordRequest_Type) isDNS_RecordRequest_DnsRecord() {}

func (*DNS_RecordRequest_Ip) isDNS_RecordRequest_DnsRecord() {}

func (*DNS_RecordRequest_Provider) isDNS_RecordRequest_DnsRecord() {}

func (*DNS_RecordRequest_HostId) isDNS_RecordRequest_DnsRecord() {}

type DNS_RecordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Ip       string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Provider string `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	HostId   int32  `protobuf:"varint,6,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *DNS_RecordReply) Reset() {
	*x = DNS_RecordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laforge_proto_laforge_proto_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNS_RecordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNS_RecordReply) ProtoMessage() {}

func (x *DNS_RecordReply) ProtoReflect() protoreflect.Message {
	mi := &file_laforge_proto_laforge_proto_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNS_RecordReply.ProtoReflect.Descriptor instead.
func (*DNS_RecordReply) Descriptor() ([]byte, []int) {
	return file_laforge_proto_laforge_proto_proto_rawDescGZIP(), []int{33}
}

func (x *DNS_RecordReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DNS_RecordReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DNS_RecordReply) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DNS_RecordReply) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DNS_RecordReply) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *DNS_RecordReply) GetHostId() int32 {
	if x != nil {
		return x.HostId
	}
	return 0
}

var File_laforge_proto_laforge_proto_proto protoreflect.FileDescriptor

var file_laforge_proto_laforge_proto_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x31, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x22, 0x53, 0x0a,
	0x0d, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6f, 0x73, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x22, 0xa1, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x42, 0x05, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x22, 0xd6, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x7c, 0x0a,
	0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x65, 0x0a, 0x10, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0xd3, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x16, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x42, 0x06, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x22, 0x3d, 0x0a, 0x0b, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x51, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a, 0x11, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x01,
	0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x9f, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0b, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x6f,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1f, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xe4, 0x01,
	0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0xae, 0x01, 0x0a, 0x09,
	0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x0c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x02, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x73, 0x12,
	0x1c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x22, 0xdc, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x97, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6d,
	0x64, 0x35, 0x42, 0x06, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x09, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x9d, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x02,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1c,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x22, 0xc1, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x32, 0x86, 0x0a, 0x0a, 0x07, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x12,
	0x41, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x2e, 0x6c, 0x61, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x6c, 0x61,
	0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x6c, 0x61, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1d, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1a,
	0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x61, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x1a, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1c, 0x2e, 0x6c,
	0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x61, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x6c, 0x61, 0x66, 0x6f,
	0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x4e,
	0x53, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x61, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x65, 0x0a, 0x10,
	0x69, 0x6f, 0x2e, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x0d, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x72,
	0x79, 0x62, 0x69, 0x6e, 0x2f, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2d, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_laforge_proto_laforge_proto_proto_rawDescOnce sync.Once
	file_laforge_proto_laforge_proto_proto_rawDescData = file_laforge_proto_laforge_proto_proto_rawDesc
)

func file_laforge_proto_laforge_proto_proto_rawDescGZIP() []byte {
	file_laforge_proto_laforge_proto_proto_rawDescOnce.Do(func() {
		file_laforge_proto_laforge_proto_proto_rawDescData = protoimpl.X.CompressGZIP(file_laforge_proto_laforge_proto_proto_rawDescData)
	})
	return file_laforge_proto_laforge_proto_proto_rawDescData
}

var file_laforge_proto_laforge_proto_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_laforge_proto_laforge_proto_proto_goTypes = []interface{}{
	(*PingRequest)(nil),        // 0: laforge_proto.PingRequest
	(*PingReply)(nil),          // 1: laforge_proto.PingReply
	(*HostTestRequest)(nil),    // 2: laforge_proto.HostTestRequest
	(*HostTestReply)(nil),      // 3: laforge_proto.HostTestReply
	(*CompetitionRequest)(nil), // 4: laforge_proto.CompetitionRequest
	(*CompetitionReply)(nil),   // 5: laforge_proto.CompetitionReply
	(*EnvironmentRequest)(nil), // 6: laforge_proto.EnvironmentRequest
	(*EnvironmentReply)(nil),   // 7: laforge_proto.EnvironmentReply
	(*BuildConfigRequest)(nil), // 8: laforge_proto.BuildConfigRequest
	(*BuildConfigReply)(nil),   // 9: laforge_proto.BuildConfigReply
	(*TeamRequest)(nil),        // 10: laforge_proto.TeamRequest
	(*TeamReply)(nil),          // 11: laforge_proto.TeamReply
	(*UserRequest)(nil),        // 12: laforge_proto.UserRequest
	(*UserReply)(nil),          // 13: laforge_proto.UserReply
	(*RoleRequest)(nil),        // 14: laforge_proto.RoleRequest
	(*RoleReply)(nil),          // 15: laforge_proto.RoleReply
	(*PermissionRequest)(nil),  // 16: laforge_proto.PermissionRequest
	(*PermissionReply)(nil),    // 17: laforge_proto.PermissionReply
	(*NetworkRequest)(nil),     // 18: laforge_proto.NetworkRequest
	(*NetworkReply)(nil),       // 19: laforge_proto.NetworkReply
	(*HostRequest)(nil),        // 20: laforge_proto.HostRequest
	(*HostReply)(nil),          // 21: laforge_proto.HostReply
	(*StepRequest)(nil),        // 22: laforge_proto.StepRequest
	(*StepReply)(nil),          // 23: laforge_proto.StepReply
	(*ErrorRequest)(nil),       // 24: laforge_proto.ErrorRequest
	(*ErrorReply)(nil),         // 25: laforge_proto.ErrorReply
	(*ScriptRequest)(nil),      // 26: laforge_proto.ScriptRequest
	(*ScriptReply)(nil),        // 27: laforge_proto.ScriptReply
	(*FileRequest)(nil),        // 28: laforge_proto.FileRequest
	(*FileReply)(nil),          // 29: laforge_proto.FileReply
	(*CommandRequest)(nil),     // 30: laforge_proto.CommandRequest
	(*CommandReply)(nil),       // 31: laforge_proto.CommandReply
	(*DNS_RecordRequest)(nil),  // 32: laforge_proto.DNS_RecordRequest
	(*DNS_RecordReply)(nil),    // 33: laforge_proto.DNS_RecordReply
}
var file_laforge_proto_laforge_proto_proto_depIdxs = []int32{
	0,  // 0: laforge_proto.laforge.GetPing:input_type -> laforge_proto.PingRequest
	2,  // 1: laforge_proto.laforge.GetHostTest:input_type -> laforge_proto.HostTestRequest
	4,  // 2: laforge_proto.laforge.GetCompetition:input_type -> laforge_proto.CompetitionRequest
	6,  // 3: laforge_proto.laforge.GetEnvironment:input_type -> laforge_proto.EnvironmentRequest
	8,  // 4: laforge_proto.laforge.GetBuildConfig:input_type -> laforge_proto.BuildConfigRequest
	10, // 5: laforge_proto.laforge.GetTeam:input_type -> laforge_proto.TeamRequest
	12, // 6: laforge_proto.laforge.GetUser:input_type -> laforge_proto.UserRequest
	14, // 7: laforge_proto.laforge.GetRole:input_type -> laforge_proto.RoleRequest
	16, // 8: laforge_proto.laforge.GetPermission:input_type -> laforge_proto.PermissionRequest
	18, // 9: laforge_proto.laforge.GetNetwork:input_type -> laforge_proto.NetworkRequest
	20, // 10: laforge_proto.laforge.GetHost:input_type -> laforge_proto.HostRequest
	22, // 11: laforge_proto.laforge.GetStep:input_type -> laforge_proto.StepRequest
	24, // 12: laforge_proto.laforge.GetError:input_type -> laforge_proto.ErrorRequest
	26, // 13: laforge_proto.laforge.GetScript:input_type -> laforge_proto.ScriptRequest
	28, // 14: laforge_proto.laforge.GetFile:input_type -> laforge_proto.FileRequest
	30, // 15: laforge_proto.laforge.GetCommand:input_type -> laforge_proto.CommandRequest
	32, // 16: laforge_proto.laforge.GetDNS_Record:input_type -> laforge_proto.DNS_RecordRequest
	1,  // 17: laforge_proto.laforge.GetPing:output_type -> laforge_proto.PingReply
	3,  // 18: laforge_proto.laforge.GetHostTest:output_type -> laforge_proto.HostTestReply
	5,  // 19: laforge_proto.laforge.GetCompetition:output_type -> laforge_proto.CompetitionReply
	7,  // 20: laforge_proto.laforge.GetEnvironment:output_type -> laforge_proto.EnvironmentReply
	9,  // 21: laforge_proto.laforge.GetBuildConfig:output_type -> laforge_proto.BuildConfigReply
	11, // 22: laforge_proto.laforge.GetTeam:output_type -> laforge_proto.TeamReply
	13, // 23: laforge_proto.laforge.GetUser:output_type -> laforge_proto.UserReply
	15, // 24: laforge_proto.laforge.GetRole:output_type -> laforge_proto.RoleReply
	17, // 25: laforge_proto.laforge.GetPermission:output_type -> laforge_proto.PermissionReply
	19, // 26: laforge_proto.laforge.GetNetwork:output_type -> laforge_proto.NetworkReply
	21, // 27: laforge_proto.laforge.GetHost:output_type -> laforge_proto.HostReply
	23, // 28: laforge_proto.laforge.GetStep:output_type -> laforge_proto.StepReply
	25, // 29: laforge_proto.laforge.GetError:output_type -> laforge_proto.ErrorReply
	27, // 30: laforge_proto.laforge.GetScript:output_type -> laforge_proto.ScriptReply
	29, // 31: laforge_proto.laforge.GetFile:output_type -> laforge_proto.FileReply
	31, // 32: laforge_proto.laforge.GetCommand:output_type -> laforge_proto.CommandReply
	33, // 33: laforge_proto.laforge.GetDNS_Record:output_type -> laforge_proto.DNS_RecordReply
	17, // [17:34] is the sub-list for method output_type
	0,  // [0:17] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_laforge_proto_laforge_proto_proto_init() }
func file_laforge_proto_laforge_proto_proto_init() {
	if File_laforge_proto_laforge_proto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_laforge_proto_laforge_proto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostTestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNS_RecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laforge_proto_laforge_proto_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNS_RecordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*CompetitionRequest_Name)(nil),
		(*CompetitionRequest_Id)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*EnvironmentRequest_Name)(nil),
		(*EnvironmentRequest_State)(nil),
		(*EnvironmentRequest_Id)(nil),
		(*EnvironmentRequest_CompetitionId)(nil),
		(*EnvironmentRequest_OwnerId)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*BuildConfigRequest_Id)(nil),
		(*BuildConfigRequest_CompetitionId)(nil),
		(*BuildConfigRequest_Provider)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*TeamRequest_Id)(nil),
		(*TeamRequest_EnvironmentId)(nil),
		(*TeamRequest_Number)(nil),
		(*TeamRequest_Tag)(nil),
		(*TeamRequest_Enabled)(nil),
		(*TeamRequest_State)(nil),
		(*TeamRequest_NetworkId)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*UserRequest_Id)(nil),
		(*UserRequest_Email)(nil),
		(*UserRequest_Phone)(nil),
		(*UserRequest_Name)(nil),
		(*UserRequest_Organization)(nil),
		(*UserRequest_Role)(nil),
		(*UserRequest_Github)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*RoleRequest_Id)(nil),
		(*RoleRequest_Name)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*PermissionRequest_Id)(nil),
		(*PermissionRequest_Name)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*NetworkRequest_Id)(nil),
		(*NetworkRequest_EnvironmentId)(nil),
		(*NetworkRequest_Domain)(nil),
		(*NetworkRequest_State)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*HostRequest_Id)(nil),
		(*HostRequest_NetworkId)(nil),
		(*HostRequest_Hostname)(nil),
		(*HostRequest_Os)(nil),
		(*HostRequest_IpAddress)(nil),
		(*HostRequest_ConnInfo)(nil),
		(*HostRequest_State)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*StepRequest_Id)(nil),
		(*StepRequest_HostId)(nil),
		(*StepRequest_DefinitionType)(nil),
		(*StepRequest_DefinitionId)(nil),
		(*StepRequest_Order)(nil),
		(*StepRequest_State)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*ErrorRequest_Code)(nil),
		(*ErrorRequest_Message)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*ScriptRequest_Id)(nil),
		(*ScriptRequest_Name)(nil),
		(*ScriptRequest_Os)(nil),
		(*ScriptRequest_Provider)(nil),
		(*ScriptRequest_Type)(nil),
		(*ScriptRequest_Md5)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*FileRequest_Id)(nil),
		(*FileRequest_Name)(nil),
		(*FileRequest_Os)(nil),
		(*FileRequest_Provider)(nil),
		(*FileRequest_Type)(nil),
		(*FileRequest_Md5)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*CommandRequest_Id)(nil),
		(*CommandRequest_Name)(nil),
		(*CommandRequest_Os)(nil),
		(*CommandRequest_Provider)(nil),
		(*CommandRequest_Type)(nil),
		(*CommandRequest_Md5)(nil),
	}
	file_laforge_proto_laforge_proto_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*DNS_RecordRequest_Id)(nil),
		(*DNS_RecordRequest_Name)(nil),
		(*DNS_RecordRequest_Type)(nil),
		(*DNS_RecordRequest_Ip)(nil),
		(*DNS_RecordRequest_Provider)(nil),
		(*DNS_RecordRequest_HostId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_laforge_proto_laforge_proto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_laforge_proto_laforge_proto_proto_goTypes,
		DependencyIndexes: file_laforge_proto_laforge_proto_proto_depIdxs,
		MessageInfos:      file_laforge_proto_laforge_proto_proto_msgTypes,
	}.Build()
	File_laforge_proto_laforge_proto_proto = out.File
	file_laforge_proto_laforge_proto_proto_rawDesc = nil
	file_laforge_proto_laforge_proto_proto_goTypes = nil
	file_laforge_proto_laforge_proto_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LaforgeClient is the client API for Laforge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LaforgeClient interface {
	GetPing(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	GetHostTest(ctx context.Context, in *HostTestRequest, opts ...grpc.CallOption) (*HostTestReply, error)
	GetCompetition(ctx context.Context, in *CompetitionRequest, opts ...grpc.CallOption) (*CompetitionReply, error)
	GetEnvironment(ctx context.Context, in *EnvironmentRequest, opts ...grpc.CallOption) (*EnvironmentReply, error)
	GetBuildConfig(ctx context.Context, in *BuildConfigRequest, opts ...grpc.CallOption) (*BuildConfigReply, error)
	GetTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*TeamReply, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error)
	GetRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleReply, error)
	GetPermission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*PermissionReply, error)
	GetNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkReply, error)
	GetHost(ctx context.Context, in *HostRequest, opts ...grpc.CallOption) (*HostReply, error)
	GetStep(ctx context.Context, in *StepRequest, opts ...grpc.CallOption) (*StepReply, error)
	GetError(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*ErrorReply, error)
	GetScript(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptReply, error)
	GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileReply, error)
	GetCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	GetDNS_Record(ctx context.Context, in *DNS_RecordRequest, opts ...grpc.CallOption) (*DNS_RecordReply, error)
}

type laforgeClient struct {
	cc grpc.ClientConnInterface
}

func NewLaforgeClient(cc grpc.ClientConnInterface) LaforgeClient {
	return &laforgeClient{cc}
}

func (c *laforgeClient) GetPing(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetHostTest(ctx context.Context, in *HostTestRequest, opts ...grpc.CallOption) (*HostTestReply, error) {
	out := new(HostTestReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetHostTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetCompetition(ctx context.Context, in *CompetitionRequest, opts ...grpc.CallOption) (*CompetitionReply, error) {
	out := new(CompetitionReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetCompetition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetEnvironment(ctx context.Context, in *EnvironmentRequest, opts ...grpc.CallOption) (*EnvironmentReply, error) {
	out := new(EnvironmentReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetBuildConfig(ctx context.Context, in *BuildConfigRequest, opts ...grpc.CallOption) (*BuildConfigReply, error) {
	out := new(BuildConfigReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetBuildConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*TeamReply, error) {
	out := new(TeamReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleReply, error) {
	out := new(RoleReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetPermission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*PermissionReply, error) {
	out := new(PermissionReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkReply, error) {
	out := new(NetworkReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetHost(ctx context.Context, in *HostRequest, opts ...grpc.CallOption) (*HostReply, error) {
	out := new(HostReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetStep(ctx context.Context, in *StepRequest, opts ...grpc.CallOption) (*StepReply, error) {
	out := new(StepReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetError(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*ErrorReply, error) {
	out := new(ErrorReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetScript(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptReply, error) {
	out := new(ScriptReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetDNS_Record(ctx context.Context, in *DNS_RecordRequest, opts ...grpc.CallOption) (*DNS_RecordReply, error) {
	out := new(DNS_RecordReply)
	err := c.cc.Invoke(ctx, "/laforge_proto.laforge/GetDNS_Record", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaforgeServer is the server API for Laforge service.
type LaforgeServer interface {
	GetPing(context.Context, *PingRequest) (*PingReply, error)
	GetHostTest(context.Context, *HostTestRequest) (*HostTestReply, error)
	GetCompetition(context.Context, *CompetitionRequest) (*CompetitionReply, error)
	GetEnvironment(context.Context, *EnvironmentRequest) (*EnvironmentReply, error)
	GetBuildConfig(context.Context, *BuildConfigRequest) (*BuildConfigReply, error)
	GetTeam(context.Context, *TeamRequest) (*TeamReply, error)
	GetUser(context.Context, *UserRequest) (*UserReply, error)
	GetRole(context.Context, *RoleRequest) (*RoleReply, error)
	GetPermission(context.Context, *PermissionRequest) (*PermissionReply, error)
	GetNetwork(context.Context, *NetworkRequest) (*NetworkReply, error)
	GetHost(context.Context, *HostRequest) (*HostReply, error)
	GetStep(context.Context, *StepRequest) (*StepReply, error)
	GetError(context.Context, *ErrorRequest) (*ErrorReply, error)
	GetScript(context.Context, *ScriptRequest) (*ScriptReply, error)
	GetFile(context.Context, *FileRequest) (*FileReply, error)
	GetCommand(context.Context, *CommandRequest) (*CommandReply, error)
	GetDNS_Record(context.Context, *DNS_RecordRequest) (*DNS_RecordReply, error)
}

// UnimplementedLaforgeServer can be embedded to have forward compatible implementations.
type UnimplementedLaforgeServer struct {
}

func (*UnimplementedLaforgeServer) GetPing(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPing not implemented")
}
func (*UnimplementedLaforgeServer) GetHostTest(context.Context, *HostTestRequest) (*HostTestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostTest not implemented")
}
func (*UnimplementedLaforgeServer) GetCompetition(context.Context, *CompetitionRequest) (*CompetitionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetition not implemented")
}
func (*UnimplementedLaforgeServer) GetEnvironment(context.Context, *EnvironmentRequest) (*EnvironmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironment not implemented")
}
func (*UnimplementedLaforgeServer) GetBuildConfig(context.Context, *BuildConfigRequest) (*BuildConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildConfig not implemented")
}
func (*UnimplementedLaforgeServer) GetTeam(context.Context, *TeamRequest) (*TeamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (*UnimplementedLaforgeServer) GetUser(context.Context, *UserRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedLaforgeServer) GetRole(context.Context, *RoleRequest) (*RoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedLaforgeServer) GetPermission(context.Context, *PermissionRequest) (*PermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (*UnimplementedLaforgeServer) GetNetwork(context.Context, *NetworkRequest) (*NetworkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (*UnimplementedLaforgeServer) GetHost(context.Context, *HostRequest) (*HostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHost not implemented")
}
func (*UnimplementedLaforgeServer) GetStep(context.Context, *StepRequest) (*StepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStep not implemented")
}
func (*UnimplementedLaforgeServer) GetError(context.Context, *ErrorRequest) (*ErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetError not implemented")
}
func (*UnimplementedLaforgeServer) GetScript(context.Context, *ScriptRequest) (*ScriptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScript not implemented")
}
func (*UnimplementedLaforgeServer) GetFile(context.Context, *FileRequest) (*FileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (*UnimplementedLaforgeServer) GetCommand(context.Context, *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommand not implemented")
}
func (*UnimplementedLaforgeServer) GetDNS_Record(context.Context, *DNS_RecordRequest) (*DNS_RecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNS_Record not implemented")
}

func RegisterLaforgeServer(s *grpc.Server, srv LaforgeServer) {
	s.RegisterService(&_Laforge_serviceDesc, srv)
}

func _Laforge_GetPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetPing(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetHostTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetHostTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetHostTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetHostTest(ctx, req.(*HostTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetCompetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetCompetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetCompetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetCompetition(ctx, req.(*CompetitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetEnvironment(ctx, req.(*EnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetBuildConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetBuildConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetBuildConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetBuildConfig(ctx, req.(*BuildConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetRole(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetPermission(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetNetwork(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetHost(ctx, req.(*HostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetStep(ctx, req.(*StepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetError(ctx, req.(*ErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetScript(ctx, req.(*ScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetDNS_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNS_RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetDNS_Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto.laforge/GetDNS_Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetDNS_Record(ctx, req.(*DNS_RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Laforge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "laforge_proto.laforge",
	HandlerType: (*LaforgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPing",
			Handler:    _Laforge_GetPing_Handler,
		},
		{
			MethodName: "GetHostTest",
			Handler:    _Laforge_GetHostTest_Handler,
		},
		{
			MethodName: "GetCompetition",
			Handler:    _Laforge_GetCompetition_Handler,
		},
		{
			MethodName: "GetEnvironment",
			Handler:    _Laforge_GetEnvironment_Handler,
		},
		{
			MethodName: "GetBuildConfig",
			Handler:    _Laforge_GetBuildConfig_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _Laforge_GetTeam_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Laforge_GetUser_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Laforge_GetRole_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _Laforge_GetPermission_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _Laforge_GetNetwork_Handler,
		},
		{
			MethodName: "GetHost",
			Handler:    _Laforge_GetHost_Handler,
		},
		{
			MethodName: "GetStep",
			Handler:    _Laforge_GetStep_Handler,
		},
		{
			MethodName: "GetError",
			Handler:    _Laforge_GetError_Handler,
		},
		{
			MethodName: "GetScript",
			Handler:    _Laforge_GetScript_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _Laforge_GetFile_Handler,
		},
		{
			MethodName: "GetCommand",
			Handler:    _Laforge_GetCommand_Handler,
		},
		{
			MethodName: "GetDNS_Record",
			Handler:    _Laforge_GetDNS_Record_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "laforge_proto/laforge_proto.proto",
}
